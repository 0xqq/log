filter {
    if [log_type] == "sflow" {
        if [message] =~ /CNTR/ {
            drop { }
        }

        grok {
            match => { "message" => "%{WORD:SampleType},%{IP:sflow.ReporterIP},%{WORD:sflow.inputPort},%{WORD:sflow.outputPort},%{WORD:sflow.srcMAC},%{WORD:sflow.dstMAC},%{WORD:sflow.EtherType},%{NUMBER:sflow.in_vlan:int},%{NUMBER:sflow.out_vlan:int},%{IP:sflow.srcIP},%{IP:sflow.dstIP},%{NUMBER:sflow.IPProtocol:int},%{WORD:sflow.IPTOS},%{WORD:sflow.IPTTL},%{NUMBER:sflow.srcPort:int},%{NUMBER:sflow.dstPort:int},%{DATA:sflow.tcpFlags},%{NUMBER:sflow.PacketSize:int},%{NUMBER:sflow.IPSize:int},%{NUMBER:sflow.SampleRate:int}"}
        }

        if "_grokparsefailure" in [tags] {
            drop { }
        }

        translate {
            field => "[sflow.srcPort]"
            destination => "[sflow.SrcSvcName]"
            dictionary_path => "/etc/logstash/conf/iana_services.yaml"
        }

        translate {
            field => "[sflow.dstPort]"
            destination => "[sflow.DstSvcName]"
            dictionary_path => "/etc/logstash/conf/iana_services.yaml"
        }

        translate {
            field => "[sflow.IPProtocol]"
            destination => "[sflow.ProtName]"
            dictionary_path => "/etc/logstash/conf/iana_protocols.yaml"
        }

        translate {
            field => "[sflow.tcpFlags]"
            destination => "[sflow.TCPFlagDecode]"
            dictionary_path => "/etc/logstash/conf/tcp_flags.yaml"
        }


        mutate {
            convert => {
                    "sflow_PacketSize" => "integer"
                    "sflow_SampleRate" => "integer"
            }
        }
        mutate {
            remove_field => ["host", "command"]
        }
    }
}