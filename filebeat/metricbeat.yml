metricbeat.modules:
- module: system
  period: 10s
  metricsets:
    - cpu
    - load
    - memory
    - network
    - process
    - process_summary
    #- core
    #- diskio
    #- socket
  processes: ['.*']
  process.include_top_n:
    by_cpu: 5      # include top 5 processes by CPU
    by_memory: 5   # include top 5 processes by memory

- module: system
  period: 1m
  metricsets:
    - filesystem
    - fsstat
  processors:
  - drop_event.when.regexp:
      system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'

- module: system
  period: 15m
  metricsets:
    - uptime


- module: apache
  metricsets: ["status"]
  enabled: true
  period: 1s
  hosts: ["http://127.0.0.1"]

- module: ceph
  metricsets: ["cluster_disk", "cluster_health", "monitor_health", "pool_disk", "osd_tree"]
  period: 10s
  hosts: ["localhost:5000"]

- module: docker
  metricsets: ["container", "cpu", "diskio", "healthcheck", "info", "memory", "network"]
  hosts: ["unix:///var/run/docker.sock"]
  period: 10s
  # To connect to Docker over TLS you must specify a client and CA certificate.
  #ssl:
    #certificate_authority: "/etc/pki/root/ca.pem"
    #certificate:           "/etc/pki/client/cert.pem"
    #key:                   "/etc/pki/client/cert.key"

- module: dropwizard
  metricsets: ["collector"]
  period: 10s
  hosts: ["localhost:8080"]
  metrics_path: /metrics/metrics
  namespace: example

- module: elasticsearch
  metricsets: ["node", "node_stats"]
  period: 10s
  hosts: ["localhost:9200"]

- module: etcd
  metricsets: ["leader", "self", "store"]
  period: 10s
  hosts: ["localhost:2379"]

- module: golang
  metricsets: ["expvar","heap"]
  period: 10s
  hosts: ["localhost:6060"]
  heap.path: "/debug/vars"
  expvar:
    namespace: "example"
    path: "/debug/vars"

- module: graphite
  metricsets: ["server"]
  enabled: true
#  protocol: "udp"
#  templates:
#    - filter: "test.*.bash.*" # This would match metrics like test.localhost.bash.stats
#      namespace: "test"
#      template: ".host.shell.metric*" # test.localhost.bash.stats would become metric=stats and tags host=localhost,shell=bash
#      delimiter: "_"

- module: haproxy
  metricsets: ["info", "stat"]
  period: 10s
  hosts: ["tcp://127.0.0.1:14567"]


- module: http
  metricsets: ["json"]
  period: 10s
  hosts: ["localhost:80"]
  namespace: "json_namespace"
  path: "/"
  #body: ""
  #method: "GET"
  #request.enabled: false
  #response.enabled: false

- module: http
  metricsets: ["server"]
  host: "localhost"
  port: "8080"
  enabled: false
#  paths:
#    - path: "/foo"
#      namespace: "foo"
#      fields: # added to the the response in root. overwrites existing fields
#        key: "value"

- module: kibana
  metricsets: ["status"]
  period: 10s
  hosts: ["localhost:5601"]


# Node metrics, from kubelet:
- module: kubernetes
  metricsets:
    - node
    - system
    - pod
    - container
    - volume
  period: 10s
  hosts: ["localhost:10255"]

# State metrics from kube-state-metrics service:
- module: kubernetes
  enabled: false
  metricsets:
    - state_node
    - state_deployment
    - state_replicaset
    - state_pod
    - state_container
  period: 10s
  hosts: ["kube-state-metrics:8080"]

# Kubernetes events
- module: kubernetes
  enabled: false
  metricsets:
    - event

- module: logstash
  metricsets: ["node", "node_stats"]
  enabled: false
  period: 10s
  hosts: ["localhost"]

- module: memcached
  metricsets: ["stats"]
  period: 10s
  hosts: ["localhost:11211"]

- module: mongodb
  metricsets: ["dbstats", "status"]
  period: 10s

  # The hosts must be passed as MongoDB URLs in the format:
  # [mongodb://][user:pass@]host[:port].
  # The username and password can also be set using the respective configuration
  # options. The credentials in the URL take precedence over the username and
  # password configuration options.
  hosts: ["localhost:27017"]

  # Username to use when connecting to MongoDB. Empty by default.
  #username: user

  # Password to use when connecting to MongoDB. Empty by default.
  #password: pass

- module: mysql
  metricsets: ["status"]
  period: 10s

  # Host DSN should be defined as "user:pass@tcp(127.0.0.1:3306)/"
  # The username and password can either be set in the DSN or using the username
  # and password config options. Those specified in the DSN take precedence.
  hosts: ["root:secret@tcp(127.0.0.1:3306)/"]

  # Username of hosts. Empty by default.
  #username: root

  # Password of hosts. Empty by default.
  #password: secret

  # By setting raw to true, all raw fields from the status metricset will be added to the event.
  #raw: false

- module: nginx
  metricsets: ["stubstatus"]
  period: 10s

  # Nginx hosts
  hosts: ["http://127.0.0.1"]

  # Path to server status. Default server-status
  #server_status_path: "server-status"

- module: php_fpm
  metricsets: ["pool"]
  period: 10s
  status_path: "/status"
  hosts: ["localhost:8080"]


- module: redis
  metricsets: ["info", "keyspace"]
  period: 10s

  # Redis hosts
  hosts: ["127.0.0.1:6379"]

  # Timeout after which time a metricset should return an error
  # Timeout is by default defined as period, as a fetch of a metricset
  # should never take longer then period, as otherwise calls can pile up.
  #timeout: 1s

  # Optional fields to be added to each event
  #fields:
  #  datacenter: west

  # Network type to be used for redis connection. Default: tcp
  #network: tcp

  # Max number of concurrent connections. Default: 10
  #maxconn: 10

  # Filters can be used to reduce the number of fields sent.
  #processors:
  #  - include_fields:
  #      fields: ["beat", "metricset", "redis.info.stats"]

  # Redis AUTH password. Empty by default.
  #password: foobared


- module: rabbitmq
  metricsets: ["node", "queue"]
  period: 10s
  hosts: ["localhost:15672"]

  username: guest
  password: guest

- module: prometheus
  metricsets: ["stats"]
  period: 10s
  hosts: ["localhost:9090"]
  metrics_path: /metrics
  #namespace: example


queue.mem:
  events: 8192
  flush.min_events: 512
  flush.timeout: 5s

output.elasticsearch:
  hosts: ["http://es1.meizu.mz:9200","http://es2.meizu.mz:9200"]
  loadbalance: true
  worker: 16

#output.kafka:
#  # initial brokers for reading cluster metadata
#  hosts: ["kafka1:9092", "kafka2:9092", "kafka3:9092"]
#  # message topic selection + partitioning
#  topic: '%{[fields.log_topic]}'
#  partition.round_robin:
#    reachable_only: false
#  required_acks: 1
#  compression: snappy
#  max_message_bytes: 1000000

setup.kibana:
  host: "kibana.meizu.mz:5601"
  enabled: true

setup.template.name: "metricbeat"
setup.template.fields: "fields.yml"
setup.template.overwrite: false
setup.template.settings:
  index.number_of_shards: 32
  index.number_of_replicas: 2

logging.level: warning
logging.to_files: true
logging.to_syslog: false
logging.files:
  path: /var/log/metricbeat
  name: metricbeat.log
  keepfiles: 7
  permissions: 0644


xpack.monitoring:
  enabled: true
  elasticsearch:
    hosts: ["https://example.com:9200", "https://example2.com:9200"]
    username: elastic
    password: test
